// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Suggestion {
  id          Int       @id @default(sequence(increment: 1))
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  publisherId String
  publisher   User      @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  title       String    @db.String()
  description String    @db.String()
  category    Category  @default(BUG)
  status      Status    @default(PLANNED)
  Votes       Vote[]
  Comments    Comment[]
}

enum Category {
  UI
  UX
  ENHANCMENT
  BUG
  FEATUREn
}

enum Status {
  PLANNED
  IN_PROGRESS
  LIVE
}

model Vote {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  suggestionId Int

  @@unique([userId, suggestionId]) // Ensures uniqueness of userId and suggestionId combination
}

model Comment {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  content       String     @db.String()
  publisherId   String
  publisher     User       @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  suggestionId  Int
  suggestion    Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  taggedUserId  String? // Reference to the tagged user
  taggedUser    User?      @relation("TaggedSuggestions", fields: [taggedUserId], references: [id], onDelete: Cascade)
  parentId      String? // Reference to the parent comment (self-referential)
  parentComment Comment?   @relation("ChildComments", fields: [parentId], references: [id], onDelete: Cascade)
  childComments Comment[]  @relation("ChildComments") // One-to-many relationship for replies
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String()
  access_token      String? @db.String()
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String()
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String       @id @default(cuid())
  name              String?
  email             String?      @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  Suggestions       Suggestion[]
  Votes             Vote[]
  Comments          Comment[]
  taggedSuggestions Comment[]    @relation("TaggedSuggestions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
