// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Suggestion {
  id          Int      @id @default(autoincrement())
  publisherId String
  publisher   User     @relation(fields: [publisherId], references: [id])
  title       String   @db.VarChar(255)
  description String   @db.Text
  category    Category @default(BUG)
  status      Status   @default(PLANNED)
  comments    Int      @default(0)
  Votes       Vote[]
}

enum Category {
  UI
  UX
  ENHANCMENT
  BUG
  FEATURE
}

enum Status {
  PLANNED
  IN_PROGRESS
  LIVE
}

model Vote {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id])
  suggestionId Int

  @@unique([userId, suggestionId]) // Ensures uniqueness of userId and suggestionId combination
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Suggestion    Suggestion[]
  Votes         Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
